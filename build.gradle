plugins{
    id 'java'
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id 'maven'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

def ver = new Version(major: 1, minor: 2, revision: 1)

group = 'net.discordservices'
version = "$ver"

java{
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}

repositories{
    mavenCentral()
    jcenter()
}

jar{
    getArchiveFileName().set("DServices4J.jar")
}

dependencies{
    api group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.5.0'
    api group: 'org.json', name: 'json', version: '20190722'
    api group: 'org.jetbrains', name: 'annotations', version: '19.0.0'
    api group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '2.8.0'
    api group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
}

task sourcesJar(type: Jar, dependsOn: classes){
    getArchiveClassifier().set("sources")
    from(sourceSets.main.allSource)
}

task javadocJar(type: Jar, dependsOn: javadoc){
    getArchiveClassifier().set("javadoc")
    from(javadoc.destinationDir)
}

artifacts{
    archives jar
    archives sourcesJar
    archives javadocJar
    archives shadowJar
}

javadoc{
    source = sourceSets.main.allJava
    destinationDir = file("$projectDir/docs")
    options.encoding = 'UTF-8'
    options.memberLevel = JavadocMemberLevel.PROTECTED
    
    if(options instanceof StandardJavadocDocletOptions){
        def opt = options as StandardJavadocDocletOptions

        opt.links(
                "https://stleary.github.io/JSON-java/",
                "https://docs.oracle.com/javase/8/docs/api/"
        )
        
        if(JavaVersion.current().isJava9Compatible()){
            opt.addBooleanOption("html5", true)
            opt.addStringOption("-release", "8")
        }
        
        if(JavaVersion.current().isJava11Compatible()){
            opt.addBooleanOption("-no-module-directories", true)
        }
    }
    
    exclude(
            "net/discordservices/dservices4j/Checks.java",
            "net/discordservices/dservices4j/requests"
    )
}

build{
    dependsOn(jar)
    dependsOn(javadocJar)
    dependsOn(sourcesJar)
    dependsOn(shadowJar)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = group
            artifactId = "dservices4j"
            version version

            from components.java
            artifact shadowJar
            artifact javadocJar
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            url = "https://repo.codemc.io/repository/maven-releases/"

            def mavenUsername = System.getenv("ORG_GRADLE_PROJECT_mavenUsername") ? System.getenv("ORG_GRADLE_PROJECT_mavenUsername") :
                    System.getProperty("ORG_GRADLE_PROJECT_mavenUsername") ? System.getProperty("ORG_GRADLE_PROJECT_mavenUsername") : null
            def mavenPassword = System.getenv("ORG_GRADLE_PROJECT_mavenPassword") ? System.getenv("ORG_GRADLE_PROJECT_mavenPassword") :
                    System.getProperty("ORG_GRADLE_PROJECT_mavenPassword") ? System.getProperty("ORG_GRADLE_PROJECT_mavenPassword") : null

            if(mavenUsername != null && mavenPassword != null) {
                credentials {
                    username = mavenUsername
                    password = mavenPassword
                }
            }
        }
    }
}

class Version{
    String major, minor, revision

    static String getBuild(){
        System.getenv("BUILD_NUMBER") ? "_" + System.getenv("BUILD_NUMBER") :
                System.getProperty("BUILD_NUMBER") ? "_" + System.getProperty("BUILD_NUMBER") : ""
    }

    String toString(){
        "$major.$minor.${revision}$build"
    }
}